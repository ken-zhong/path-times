{"version":3,"sources":["api/hooks.ts","app/rest-container.tsx","api/constants.js","app/station-selector.tsx","api/train-resource.tsx","app/train-item.tsx","app/train-list.tsx","api/use-query.tsx","app/layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StationContext","createContext","station","setStation","useStationContext","useContext","RestContainer","children","useQueryParam","StringParam","setter","useReducer","x","forceUpdate","val","a","useStationSelector","CacheProvider","NetworkErrorBoundary","Provider","value","STATIONS","StationSelector","Typography","variant","Select","native","fullWidth","onChange","e","currentTarget","map","s","key","toUpperCase","split","join","TrainResource","lineName","lineColors","projectedArrival","lastUpdated","status","headsign","route","routeDisplayName","direction","this","getFetchKey","fetch","schema","upcomingTrains","getEntitySchema","Resource","urlRoot","useStyles","makeStyles","createStyles","root","margin","padding","TrainItem","train","classes","timeToArrival","moment","diff","Card","CardContent","CardHeader","title","lineColor","idx","style","borderBottom","color","replace","TrainList","fetchShape","params","maybePromise","useRetrieve","state","__INTERNAL__","StateContext","useDenormalized","denormalized","ready","doFetch","useFetcher","refetch","data","loading","cacheReady","options","invalidIfStale","hasUsableData","then","error","useError","useQuery","listShape","trains","useEffect","interval","setInterval","clearInterval","slice","sort","b","LinearProgress","container","backgroundColor","display","justifyContent","minHeight","width","Layout","className","align","gutterBottom","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.061f2fed.chunk.js","sourcesContent":["import { useReducer, useContext, createContext } from 'react';\nimport { useQueryParam, StringParam } from 'use-query-params';\n\ninterface StationInterface {\n  station: string | undefined;\n  setStation: Function;\n}\n\nexport const StationContext = createContext<StationInterface>({\n  station: '',\n  setStation: () => null\n});\n\nexport const useStationSelector = (): StationInterface => {\n  const [station, setter] = useQueryParam('station', StringParam);\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n\n  const setStation = async (val: string) => {\n    await setter(val);\n    return forceUpdate(0);\n  };\n\n  return { station, setStation };\n};\n\n// returns { station, setStation }\nexport const useStationContext = () => {\n  return useContext(StationContext);\n};\n","import React, { Suspense } from 'react';\nimport { CacheProvider, NetworkErrorBoundary } from 'rest-hooks';\nimport { LinearProgress } from '@material-ui/core';\n\nimport { StationContext, useStationSelector } from '../api/hooks';\n\nconst RestContainer: React.FC = ({ children }) => {\n  const { station, setStation } = useStationSelector();\n\n  return (\n    <CacheProvider>\n      <NetworkErrorBoundary>\n        <StationContext.Provider value={{ station, setStation }}>\n          {children}\n        </StationContext.Provider>\n      </NetworkErrorBoundary>\n    </CacheProvider>\n  );\n};\n\nexport default RestContainer;\n","export const STATIONS = [\n  'hoboken',\n  'newport',\n  'journal_square',\n  'grove_street',\n  'exchange_place',\n  'harrison',\n  'newark',\n  'world_trade_center',\n  'christopher_street',\n  'ninth_street',\n  'fourteenth_street',\n  'twenty_third_street',\n  'thirty_third_street'\n];\n","import React, { Fragment } from 'react';\nimport { Select, Typography } from '@material-ui/core';\n\nimport { STATIONS } from '../api/constants';\nimport { useStationContext } from '../api/hooks';\n\nconst StationSelector: React.FC = () => {\n  const { station, setStation } = useStationContext();\n\n  return (\n    <Fragment>\n      <Typography variant=\"overline\">Select Station</Typography>\n      <Select\n        native\n        fullWidth\n        variant=\"outlined\"\n        value={station}\n        onChange={(e: any): void => setStation(e.currentTarget.value)}\n      >\n        {STATIONS.map((s: string) => (\n          <option key={s} value={s}>\n            {s\n              .toUpperCase()\n              .split('_')\n              .join(' ')}\n          </option>\n        ))}\n      </Select>\n    </Fragment>\n  );\n};\n\nexport default StationSelector;\n","import { Resource } from 'rest-hooks';\n\n// SAMPLE RESPONSE\n// {\n//   \"lineName\": \"33rd Street via Hoboken\",\n//   \"lineColors\": [\n//     \"#4D92FB\",\n//     \"#FF9900\"\n//   ],\n//   \"projectedArrival\": \"2019-11-22T10:31:54Z\",\n//   \"lastUpdated\": \"2019-11-22T09:41:29Z\",\n//   \"status\": \"ON_TIME\",\n//   \"headsign\": \"33rd Street via Hoboken\",\n//   \"route\": \"JSQ_33_HOB\",\n//   \"routeDisplayName\": \"Journal Square - 33rd Street (via Hoboken)\",\n//   \"direction\": \"TO_NY\"\n// },\n\nexport interface TrainInterface {\n  readonly lineName: string;\n  readonly lineColors: string[];\n  readonly projectedArrival: string;\n  readonly lastUpdated: string;\n  readonly status: string;\n  readonly headsign: string;\n  readonly route: string;\n  readonly routeDisplayName: string;\n  readonly direction: string;\n}\n\nexport class TrainResource extends Resource {\n  readonly lineName: string = '';\n  readonly lineColors: string[] = [];\n  readonly projectedArrival: string = '';\n  readonly lastUpdated: string = '';\n  readonly status: string = '';\n  readonly headsign: string = '';\n  readonly route: string = '';\n  readonly routeDisplayName: string = '';\n  readonly direction: string = '';\n\n  static listShape<T extends typeof Resource>(this: T) {\n    return {\n      ...super.listShape(),\n      getFetchKey: ({ station = 'hoboken' }: { station: string }) => {\n        return `https://path.api.razza.dev/v1/stations/${station}/realtime`;\n      },\n      fetch: ({ station = 'hoboken' }: { station: string }) => {\n        return this.fetch('get', `https://path.api.razza.dev/v1/stations/${station}/realtime`);\n      },\n      schema: { upcomingTrains: [this.getEntitySchema()] }\n    };\n  }\n\n  pk() {\n    return this.lineName + this.projectedArrival;\n  }\n\n  static urlRoot = 'path-razza-api';\n}\n","import React from 'react';\nimport { Card, CardHeader, CardContent, Typography } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport moment from 'moment';\n\nimport { TrainInterface } from '../api/train-resource';\n\nconst useStyles = makeStyles(\n  createStyles({\n    root: {\n      margin: '12px 0',\n      padding: '0 12px'\n    }\n  })\n);\n\n// SAMPLE RESPONSE\n// {\n//   \"lineName\": \"33rd Street via Hoboken\",\n//   \"lineColors\": [\n//     \"#4D92FB\",\n//     \"#FF9900\"\n//   ],\n//   \"projectedArrival\": \"2019-11-22T10:31:54Z\",\n//   \"lastUpdated\": \"2019-11-22T09:41:29Z\",\n//   \"status\": \"ON_TIME\",\n//   \"headsign\": \"33rd Street via Hoboken\",\n//   \"route\": \"JSQ_33_HOB\",\n//   \"routeDisplayName\": \"Journal Square - 33rd Street (via Hoboken)\",\n//   \"direction\": \"TO_NY\"\n// },\n\nconst TrainItem: React.FC<{ train: TrainInterface }> = ({ train }) => {\n  const classes = useStyles();\n\n  let timeToArrival = moment(train.projectedArrival).diff(moment(), 'minutes');\n  if (timeToArrival < 0) timeToArrival = 0;\n\n  return (\n    <Card classes={classes}>\n      <CardContent>\n        <CardHeader title={train.lineName} />\n        {train.lineColors.map((lineColor: string, idx: number) => (\n          <div key={`lc-${idx}`} style={{ borderBottom: `4px solid ${lineColor}` }} />\n        ))}\n        <CardContent>\n          <div>\n            <Typography variant=\"h6\" color={timeToArrival !== 0 ? 'primary' : 'error'}>\n              Arriving in: {timeToArrival} min\n            </Typography>\n            <Typography>Status: {train.status.replace('_', ' ')}</Typography>\n            <Typography>Direction: {train.direction.replace('_', ' ')}</Typography>\n          </div>\n        </CardContent>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TrainItem;\n","import React, { Fragment, useEffect } from 'react';\nimport { LinearProgress, Typography } from '@material-ui/core';\n\nimport { TrainInterface, TrainResource } from '../api/train-resource';\nimport { useStationContext } from '../api/hooks';\nimport { useQuery } from '../api/use-query';\nimport TrainItem from './train-item';\n\nconst TrainList: React.FC = () => {\n  const { station } = useStationContext();\n  const { data: trains, loading, refetch } = useQuery(TrainResource.listShape(), { station });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refetch();\n    }, 30000);\n    return () => clearInterval(interval);\n  }, [station]);\n\n  let upcomingTrains = trains && trains.upcomingTrains;\n  if (upcomingTrains) {\n    upcomingTrains = upcomingTrains // sort the upcoming trains by arrival time\n      .slice()\n      .sort((a, b): number => (a.projectedArrival > b.projectedArrival ? 1 : -1));\n  }\n\n  if (loading) return <LinearProgress />;\n\n  return (\n    <Fragment>\n      {upcomingTrains ? (\n        upcomingTrains.map((train, idx) => <TrainItem train={train} key={idx} />)\n      ) : (\n        <Typography>No upcoming trains...</Typography>\n      )}\n    </Fragment>\n  );\n};\n\nexport default TrainList;\n","import { useContext } from 'react';\nimport {\n  useRetrieve,\n  useError,\n  useFetcher,\n  Schema,\n  ReadShape,\n  FetchShape,\n  useDenormalized,\n  __INTERNAL__\n} from 'rest-hooks';\n\n/** If the invalidIfStale option is set we suspend if resource has expired */\nexport default function hasUsableData(\n  cacheReady: boolean,\n  fetchShape: Pick<FetchShape<any>, 'options'>\n) {\n  return !((fetchShape.options && fetchShape.options.invalidIfStale) || !cacheReady);\n}\n\n/** Ensure a resource is available; loading and error returned explicitly. */\nexport function useQuery<Params extends Readonly<object>, S extends Schema>(\n  fetchShape: ReadShape<S, Params>,\n  params: Params | null\n) {\n  let maybePromise = useRetrieve(fetchShape, params);\n  const state = useContext(__INTERNAL__.StateContext);\n  const [denormalized, ready] = useDenormalized(fetchShape, params, state);\n\n  const doFetch = useFetcher(fetchShape);\n\n  const refetch = params ? () => doFetch(params) : () => null;\n\n  const loading =\n    !hasUsableData(ready, fetchShape) && maybePromise && typeof maybePromise.then === 'function';\n\n  let error = useError(fetchShape, params, ready);\n\n  return {\n    data: denormalized,\n    loading,\n    refetch,\n    error\n  };\n}\n","import React, { Suspense } from 'react';\n\nimport { CircularProgress, LinearProgress, Typography } from '@material-ui/core';\n\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\n\nimport StationSelector from './station-selector';\nimport TrainList from './train-list';\n\nconst useStyles = makeStyles(\n  createStyles({\n    container: {\n      backgroundColor: '#f5f5f5',\n      display: 'flex',\n      justifyContent: 'center',\n      minHeight: '100vh'\n    },\n    width: {\n      width: 600,\n      padding: 12\n    }\n  })\n);\n\nconst Layout: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.width}>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          Path Times\n        </Typography>\n        <StationSelector />\n        <TrainList />\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport RestContainer from './app/rest-container';\nimport Layout from './app/layout';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <RestContainer>\n        <Layout />\n      </RestContainer>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}